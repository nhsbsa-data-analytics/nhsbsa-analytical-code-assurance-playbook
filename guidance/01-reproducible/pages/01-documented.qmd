---
title: "Documented"
description: "Effective documentation is essential for any software project to be reproducible, quality assured and transparent."
---

> ## Pre-requisite reading
>
> * [AF Duck book: Code documentation][duck-book-code-doc]
> * [AF Duck book: Project documentation][duck-book-project-doc]
> * [NHSBSA DDaT playbook: Licensing software or code][ddat-playbook-licenses]
> * [NHSBSA DDaT playbook: Standard code repository files][ddat-playbook-dev-doc]

## What sort of documentation is needed?

Effective documentation is essential for any software project to be reproducible, quality assured and transparent. It encompasses both code and the project itself, providing technical details, project management information, records of quality assurance and details of logic, assumptions and decisions made.

We should document:

* a project's purpose and scope
* how to install or run code or other outputs and their dependencies
* how to use code or other outputs like apps or dashboards
* decisions and changes across a project lifecycle

## Why should we document our code and project?

* **Understanding:** Makes code and project purpose clear, improving [transparency][transparent].
* **Collaboration:** Reduces time to become productive for contributors and other users.
* **Maintenance:** Makes modifying, fixing and refactoring code safer and easier.
* **Improved Design:** Explaining complex parts often highlights areas for simplification or improvement.
* **Accessibility:** Makes the project [accessible][accessible] and usable for its intended audience.
* **Knowledge:** Prevents critical information loss when team members change.
* **Standards:** Provides a record of how a project has been [quality assured][quality-assured] and facilitates [reproducibility][reproducible] and [transparency][transparent].

## How do we create and maintain quality documentation?

* **Project-Level:**
  * The standard files used in code repositories are in the [NHSBSA DDaT playbook][ddat-playbook-dev-doc] - similar documentation should exist even for projects where version control is not in use, for example where low-or-no-code tools are used.
  * In addition to the standard documentation, a project may also need to include additional documentation.
    * **Support Information:** How to get help, particularly where a project output includes an app-like artifact.
    * **Design Docs:** High-level overview for complex projects.
    * **Accessibility Statement:** If an output is available as a webpage or app, it must have an accessibility statement.

* **Code-Level:**
  * **In-Code Comments:** Explanations within the code focusing on the *why* (rationale, complex logic, trade-offs).
  * **API Documentation:** Standardized comments for functions, classes, modules explaining their purpose, parameters, returns, and usage.
  * **Detailed Explanations:** Separate documents or wiki pages for complex algorithms, data structures, or specific modules when needed.

* **General**
  * **Start Early & Integrate:** Treat documentation as an integral part of the development process, and build updates into your workflow.
  * **Write Clearly and Concisely:** Know your audience for a particular piece of documentation and use straightforward language at the right level.
  * **Focus on the "Why":** Especially for in-code comments, explain the reasoning behind non-obvious decisions.
  * **Use Standard Formats & Locations:** Employ conventional filenames, formats, and place documentation where users expect it.
  * **Leverage Tooling**
    * Use linters and formatters to enforce documentation standards.
    * Use tools to generate documentation from code comments.
    * Use templates for consistency.
  * **Maintain Discoverability:** Ensure documentation is easy to find and link related documents together.
  * **Assign Responsibility:** Have clear ownership for creating and maintaining different documentation aspects.

## How do we define success?

* **Understandable:** Documentation enables rapid onboarding of contributors and users.
* **Accurate:** Documentation reflects the state of a project, with documentation updates being part of the regular workflow.
* **Discoverable:** Needed information is easy to locate.
* **Completeness:** Documentation covers all aspects adequately for the intended audience, answering reasonable questions.

## How do we measure success?

* **Reviewers:** [Critical friends][critical-friend] and other [peer-reviewers][peer-review] consider all documentation in addition to code or main outputs.
* **Retrospectives:** Documentation is included in retrospective discussions, and any areas for improvement identified are planned in.
* **Feedback:** We seek feedback on a project, including its documentation, from contributors and users in general communications and by surveys.

[duck-book-code-doc]: https://best-practice-and-impact.github.io/qa-of-code-guidance/code_documentation.html
[duck-book-project-doc]: https://best-practice-and-impact.github.io/qa-of-code-guidance/project_documentation.html
[ddat-playbook-licenses]: https://nhsbsa.github.io/nhsbsa-digital-playbook/development/coding-licences/
[ddat-playbook-dev-doc]: https://nhsbsa.github.io/nhsbsa-digital-playbook/development/dev-documentation/
[transparent]: /guidance/03-transparent/index.qmd
[accessible]: /guidance/01-reproducible/pages/02-accessible.qmd
[quality-assured]: /guidance/02-quality-assured/index.qmd
[reproducible]: /guidance/01-reproducible/index.qmd
[critical-friend]: https://nhsbsa-data-analytics.github.io/nhsbsa-data-science-playbook/guidance/03-analysis/analysis-steps/04-review.html#critical-friend-review
[peer-review]: /guidance/02-quality-assured/pages/06-peer-reviewed.qmd
